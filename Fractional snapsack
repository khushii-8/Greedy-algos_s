#include <bits/stdc++.h>
using namespace std;

struct Item {
    int value, weight;
};

bool cmp(Item a, Item b) {
    double r1 = (double)a.value / a.weight;
    double r2 = (double)b.value / b.weight;
    return r1 > r2;  // sort by ratio (descending)
}

double fractionalKnapsack(int W, vector<Item>& items) {
    sort(items.begin(), items.end(), cmp);

    double maxValue = 0.0;
    for (int i = 0; i < items.size(); i++) {
        if (items[i].weight <= W) {
            // take full item
            W -= items[i].weight;
            maxValue += items[i].value;
        } else {
            // take fraction
            maxValue += (double)items[i].value * ((double)W / items[i].weight);
            break;
        }
    }
    return maxValue;
}

int main() {
    int n, W;
    cin >> n >> W;  // number of items and capacity
    vector<Item> items(n);
    for (int i = 0; i < n; i++) cin >> items[i].value >> items[i].weight;

    cout << "Maximum value = " << fractionalKnapsack(W, items) << endl;
}
